// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/edgexfoundry/go-mod-core-contracts/v2/dtos/common"

	errors "github.com/edgexfoundry/go-mod-core-contracts/v2/errors"

	mock "github.com/stretchr/testify/mock"

	responses "github.com/edgexfoundry/go-mod-core-contracts/v2/dtos/responses"
)

// DeviceServiceCommandClient is an autogenerated mock type for the DeviceServiceCommandClient type
type DeviceServiceCommandClient struct {
	mock.Mock
}

// GetCommand provides a mock function with given fields: ctx, baseUrl, deviceName, commandName, queryParams
func (_m *DeviceServiceCommandClient) GetCommand(ctx context.Context, baseUrl string, deviceName string, commandName string, queryParams string) (*responses.EventResponse, errors.EdgeX) {
	ret := _m.Called(ctx, baseUrl, deviceName, commandName, queryParams)

	var r0 *responses.EventResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *responses.EventResponse); ok {
		r0 = rf(ctx, baseUrl, deviceName, commandName, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.EventResponse)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) errors.EdgeX); ok {
		r1 = rf(ctx, baseUrl, deviceName, commandName, queryParams)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// SetCommand provides a mock function with given fields: ctx, baseUrl, deviceName, commandName, queryParams, settings
func (_m *DeviceServiceCommandClient) SetCommand(ctx context.Context, baseUrl string, deviceName string, commandName string, queryParams string, settings map[string]string) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, baseUrl, deviceName, commandName, queryParams, settings)

	var r0 common.BaseResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, map[string]string) common.BaseResponse); ok {
		r0 = rf(ctx, baseUrl, deviceName, commandName, queryParams, settings)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, map[string]string) errors.EdgeX); ok {
		r1 = rf(ctx, baseUrl, deviceName, commandName, queryParams, settings)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// SetCommandWithObject provides a mock function with given fields: ctx, baseUrl, deviceName, commandName, queryParams, settings
func (_m *DeviceServiceCommandClient) SetCommandWithObject(ctx context.Context, baseUrl string, deviceName string, commandName string, queryParams string, settings map[string]interface{}) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, baseUrl, deviceName, commandName, queryParams, settings)

	var r0 common.BaseResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, map[string]interface{}) common.BaseResponse); ok {
		r0 = rf(ctx, baseUrl, deviceName, commandName, queryParams, settings)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, map[string]interface{}) errors.EdgeX); ok {
		r1 = rf(ctx, baseUrl, deviceName, commandName, queryParams, settings)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}
