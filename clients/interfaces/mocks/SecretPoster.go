// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/edgexfoundry/go-mod-core-contracts/v4/dtos/common"

	errors "github.com/edgexfoundry/go-mod-core-contracts/v4/errors"

	mock "github.com/stretchr/testify/mock"
)

// SecretPoster is an autogenerated mock type for the SecretPoster type
type SecretPoster struct {
	mock.Mock
}

// AddSecret provides a mock function with given fields: ctx, baseUrl, request
func (_m *SecretPoster) AddSecret(ctx context.Context, baseUrl string, request common.SecretRequest) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, baseUrl, request)

	if len(ret) == 0 {
		panic("no return value specified for AddSecret")
	}

	var r0 common.BaseResponse
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(context.Context, string, common.SecretRequest) (common.BaseResponse, errors.EdgeX)); ok {
		return rf(ctx, baseUrl, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, common.SecretRequest) common.BaseResponse); ok {
		r0 = rf(ctx, baseUrl, request)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, common.SecretRequest) errors.EdgeX); ok {
		r1 = rf(ctx, baseUrl, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// NewSecretPoster creates a new instance of SecretPoster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecretPoster(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecretPoster {
	mock := &SecretPoster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
