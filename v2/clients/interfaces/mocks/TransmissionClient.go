// Code generated by mockery v2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/edgexfoundry/go-mod-core-contracts/v2/v2/dtos/common"

	errors "github.com/edgexfoundry/go-mod-core-contracts/v2/errors"

	mock "github.com/stretchr/testify/mock"

	responses "github.com/edgexfoundry/go-mod-core-contracts/v2/v2/dtos/responses"
)

// TransmissionClient is an autogenerated mock type for the TransmissionClient type
type TransmissionClient struct {
	mock.Mock
}

// AllTransmissions provides a mock function with given fields: ctx, offset, limit
func (_m *TransmissionClient) AllTransmissions(ctx context.Context, offset int, limit int) (responses.MultiTransmissionsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, offset, limit)

	var r0 responses.MultiTransmissionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, int, int) responses.MultiTransmissionsResponse); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiTransmissionsResponse)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeleteProcessedTransmissionsByAge provides a mock function with given fields: ctx, age
func (_m *TransmissionClient) DeleteProcessedTransmissionsByAge(ctx context.Context, age int) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, age)

	var r0 common.BaseResponse
	if rf, ok := ret.Get(0).(func(context.Context, int) common.BaseResponse); ok {
		r0 = rf(ctx, age)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, int) errors.EdgeX); ok {
		r1 = rf(ctx, age)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionById provides a mock function with given fields: ctx, id
func (_m *TransmissionClient) TransmissionById(ctx context.Context, id string) (responses.TransmissionResponse, errors.EdgeX) {
	ret := _m.Called(ctx, id)

	var r0 responses.TransmissionResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) responses.TransmissionResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(responses.TransmissionResponse)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionsByStatus provides a mock function with given fields: ctx, status, offset, limit
func (_m *TransmissionClient) TransmissionsByStatus(ctx context.Context, status string, offset int, limit int) (responses.MultiTransmissionsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, status, offset, limit)

	var r0 responses.MultiTransmissionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) responses.MultiTransmissionsResponse); ok {
		r0 = rf(ctx, status, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiTransmissionsResponse)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, status, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionsBySubscriptionName provides a mock function with given fields: ctx, subscriptionName, offset, limit
func (_m *TransmissionClient) TransmissionsBySubscriptionName(ctx context.Context, subscriptionName string, offset int, limit int) (responses.MultiTransmissionsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, subscriptionName, offset, limit)

	var r0 responses.MultiTransmissionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) responses.MultiTransmissionsResponse); ok {
		r0 = rf(ctx, subscriptionName, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiTransmissionsResponse)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, subscriptionName, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// TransmissionsByTimeRange provides a mock function with given fields: ctx, start, end, offset, limit
func (_m *TransmissionClient) TransmissionsByTimeRange(ctx context.Context, start int, end int, offset int, limit int) (responses.MultiTransmissionsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, start, end, offset, limit)

	var r0 responses.MultiTransmissionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, int) responses.MultiTransmissionsResponse); ok {
		r0 = rf(ctx, start, end, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiTransmissionsResponse)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, start, end, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}
